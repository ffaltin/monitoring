// define the minimal value
@min: @baseWidth / @nbColumns;
/* Size Method --------------------------------------- */
// define the width of the block
.setSize(@index;@gutter:0) when (@index =< @nbColumns) and (@index > 0) {
	.column();
	padding: 0;
	width: @min * @index - @gutter;
}

// set the size with gutter when gutter is a number
.size (@index;@gutter:0) when (isnumber(@gutter)) {
	.setSize(@index,@gutter);
	margin-right: @gutter;
}
// set the size and center it
.size (@index;@gutter:0) when (@gutter = "center") {
	.setSize(@index,0);
	margin-left: (@baseWidth - @min*@index) /2;
}
// set the size and center it
.size (@index;@gutter:0) when (@gutter = "right") {
	.setSize(@index,0);
	margin-left: (@baseWidth - @min*@index);
}

.medium-size (@index;@gutter:0) when (isnumber(@gutter)) {
	@media only screen and (max-width: @minLargeWidth) {
		.size(@index,@gutter);
	}
}
// small-size
.small-size (@index;@gutter:0) when (isnumber(@gutter)) {
	@media only screen and (max-width: @minMediumWidth) {
		.size(@index,@gutter);
	}
}

// set the margin left of the block
.offset (@index) when (@index < @nbColumns) {
	margin-left: @min*@index;
}

.medium-offset (@index) when (@index < @nbColumns) {
	@media only screen and (max-width: @minLargeWidth) {
		margin-left: @min*@index;
	}
}

.small-offset (@index) when (@index < @nbColumns) {
	@media only screen and (max-width: @minMediumWidth) {
		margin-left: @min*@index;
	}
}

// move block to right
.push (@index) when (@index < @nbColumns) {
	left: @min*@index;
}
// move block to left
.pull (@index) when (@index < @nbColumns) {
	right: @min*@index;
}

// create the block-grid system
.block-grid (@index;@gutter:0) {
	& > * {
		.column();
		width: 100% / @index - @gutter;
		margin-right: @gutter;
	}
}

// create the small block-grid system
.medium-block-grid (@index;@gutter:0) {
	@media only screen and (max-width: @minLargeWidth) {
		& > * {
			.column();
			width: 100% / @index - @gutter;
			margin-right: @gutter;
		}
	}
}

// create the small block-grid system
.small-block-grid (@index;@gutter:0) {
	@media only screen and (max-width: @minMediumWidth) {
		& > * {
			.column();
			width: 100% / @index - @gutter;
			margin-right: @gutter;
		}
	}
}


.parent () {
	.row;
	@media only screen and (max-width: @minLargeWidth) {
		.resetRow;
	}
	
}

// set the resize transition
.resizeTransition () when (@useResizeTransition = true) {
	-webkit-transition: 0.2s all ease-out;
	-moz-transition: 0.2s all ease-out;
	transition: 0.2s all ease-out;
}
// reset all value for row and body
.resetValueForNewMediaQuery {
	// reset body
	body { 
		-webkit-text-size-adjust: none;
		-ms-text-size-adjust: none;
		width: 100%;
		min-width: 0;
		margin-left: 0;
		margin-right: 0;
		padding-left: 0;
		padding-right: 0;
	}
	//
	.row { width: auto; min-width: 0; margin-left: 0; margin-right: 0; }
}
// for use inside an object
.resetRow () {
	width: auto; min-width: 0; margin-left: 0; margin-right: 0;
}
/* Global Reset & Standards ---------------------- */
*, *:before, *:after { -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; }
/* Grid ----------------------------------------------- */
.row {
	width: @mainWidth;
	min-width: @minLargeWidth;
	max-width: 100%;
	margin: 0 auto;
	.row {
		width: auto;
		max-width: none;
		min-width: 0;
		margin: 0 -15px;
	}
	@media only screen and (max-width: @minLargeWidth) {
		.resetRow;
	}
}
@media only screen and (max-width: @minLargeWidth) {
	body { 
		-webkit-text-size-adjust: none;
		-ms-text-size-adjust: none;
		width: 100%;
		min-width: 0;
		margin-left: 0;
		margin-right: 0;
		padding-left: 0;
		padding-right: 0;
	}
	.row {
		width: auto; min-width: 0; margin-left: 0; margin-right: 0;
	}
}
// prepare column, no fucking float...
.column() {
	.resizeTransition;
	display: inline-block;
	.fixIe7(display,inline-block);
	min-height: 1px;
	position: relative; 
	vertical-align: top;
}

// htmlObject resize automatically
img { display: inline-block; .fixIe7(display,inline-block); -ms-interpolation-mode: bicubic; }
img, object, embed { max-width: 100%; height: auto; }
object, embed { height: 100%; }
img { -ms-interpolation-mode: bicubic; }
#map_canvas img, .map_canvas img { max-width: none!important; }
